service:
  name: skills-microservice

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-plugin-typescript

custom:
  serverless-offline:
    httpPort: 8080
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    SKILLS_TABLE: skills_${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SKILLS_TABLE}'

functions:
  createSkills:
    handler: src/functions/index.createSkills
    events:
      - httpApi:
          method: post
          path: /skills/{id}
  deleteSkills:
    handler: src/functions/index.deleteSkills
    events:
      - httpApi:
          method: delete
          path: /skills/{id}
  getSkills:
    handler: src/functions/index.getSkills
    events:
      - httpApi:
          method: get
          path: /skills/{id}
  updateSkills:
    handler: src/functions/index.updateSkills
    events:
      - httpApi:
          method: patch
          path: /skills/{id}

resources:
  Resources:
    SkillsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SKILLS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
